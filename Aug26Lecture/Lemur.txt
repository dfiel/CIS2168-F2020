--------------------------------------------
public interface HasTail {
   boolean isTailStriped();
}
--------------------------------------------
public class Primate {
   public boolean hasHair() { return true; }
}
--------------------------------------------
public class Lemur extends Primate implements HasTail {

   @Override
   public boolean isTailStriped() {
      return false;
   }

   public int age = 10;

   public static void main(String[] args) {
      Lemur lemur = new Lemur();
      System.out.println(lemur.age);

      /* Lemur object as an instance of an interface it
         it implements */
      HasTail hasTail = lemur;
      System.out.println(hasTail.isTailStriped());

      // the following will not compile:
      // System.out.println(hasTail.age);

      // must use cast to access age:
      System.out.println( ( (Lemur) hasTail).age);



      /*Lemur object as an instance of its superclass*/
      Primate primate = lemur;
      System.out.println(primate.hasHair());

      // the following will not compile:
      // System.out.println(hasTail.age);

      // must use cast to access isTailStriped():
      System.out.println(((Lemur) primate).isTailStriped());

   }
}

/* Things to notice:
*    - Only one object, Lemur is created and referenced
*    - Ability of instance of Lemur to be passed as an
*      instance of an interface it implements, HasTail,
*      as well as an instance of one of its superclasses,
*      Primate, is the nature of polymorphism
*    - Once an object has been assigned a new reference
*      type, only the methods of that reference type are
*      callable on the object without an explicit cast.
*    - Use explicit cast as on line 21 to get access to
*      the age variable; without the cast, only direct
*      access to methods defined with the HasTail interface
*      is possible.
*    - Similarly, the reference Primate has access only to
*      methods defined in the primate class, and it doesn't
*      have direct access to the isTailStriped() method.
* */
